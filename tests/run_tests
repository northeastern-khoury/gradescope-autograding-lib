#!/usr/bin/env python3
''' run_tests
    PREREQ: Requires gradescope lib be on $PYTHONPATH
'''

import importlib
import os
import sys
import traceback

from pathlib import Path


# def do_nothing(gradescope):
#   ''' do_nothing:
#       "Null" Testing wrapper just returns the installed lib
#   '''
#   if gradescope is None:
#     import gradescope #pylint:disable=C0415,E0401
#     return gradescope
#   return gradescope

# def go_gslib_reload(gradescope):
#   ''' go_gslib_reload:
#       Reload the gslib
#   '''
#   importlib.invalidate_caches()
#   if gradescope is None:
#     return importlib.import_module("gradescope")
#   return importlib.reload(gradescope)

def main():
  ''' main time '''
  os.chdir(Path(__file__).parent.absolute())

  gradescope = None
  failures = 0

  sys.path.insert(1, str(Path(os.path.dirname(__file__)).resolve().parent / "src"))
  os.environ['DEBUG'] = 'True'
  targets = sorted(filter(lambda d: d[0] != '.', filter(os.path.isdir, os.listdir())))
  failed_targets = set()

  for testdir in targets:
    failed = False
    def _failed(testdir, msg):
      nonlocal failed, failed_targets
      if not failed:
        print(f"[FAIL] {testdir}")
        failed = True
        failed_targets.add(testdir)
      print(f"       {msg}")

    try:
      # Point gradescope lib to the current test case
      os.environ['AUTOGRADER_ROOT'] = os.path.abspath(testdir)
      os.environ['PATH_RESULTS']    = str(Path(os.getcwd()) / 'results.json')

      # Reload dependencies
      # gradescope = reload_lib(gradescope)
      importlib.invalidate_caches()
      if gradescope is None:
        gradescope = importlib.import_module("gradescope")
      else:
        gradescope = importlib.reload(gradescope)
        gradescope.paths.reload()

      # Load Testcase
      unit = importlib.import_module(testdir)
      tester = unit.tester

      # Functional section
      res = tester.exec()
      res.save()

      if not os.path.exists(os.environ['PATH_RESULTS']):
        _failed(testdir, "Failed to produce output json")
      elif tester.failed:
        _failed(testdir, open(os.environ['PATH_RESULTS']).read())

      if hasattr(unit, "post_test"):
        try:
          unit.post_test(res)
        except AssertionError as exc:
          _failed(testdir, f"Postcondition Exception: {exc}")
    except Exception as exc: #pylint:disable=W0703
      _failed(testdir, str(exc))
      traceback.print_exc()
    finally:
      if os.path.exists(os.environ['PATH_RESULTS']):
        os.remove(os.environ['PATH_RESULTS'])
      if not failed:
        print(f"[OKAY] {testdir}")
      else:
        failures += 1
      print("---\n")

  if failures != 0:
    print(f"{failures}/{len(targets)} FAILED: {','.join(failed_targets)}")
    sys.exit(1)

if __name__ == '__main__':
  main()
